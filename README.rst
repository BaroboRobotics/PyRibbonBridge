PyRibbonBridge
==============

A pure Python implementation of ribbon-bridge, an RPC framework. Read more about
ribbon-bridge at http://github.com/BaroboRobotics/ribbon-bridge .

Requirements
------------

Ribbon bridge uses asyncio for asynchronous remote procedure calls, and thus
requires Python 3.5 or above. 

Internally, it uses Google Protocol Buffers for data serialization, and thus
requires protobuf-v3.0.0b2 or later. 

Usage
-----
The basic strategy is:
1. Design the procedure call interface with Google Protobuf. Each callable
   remote procedure is represented by a nested protobuf message. In order to
   be a valid callable remote procedure, the message must have sub-messages
   named "In" and "Result". For instance, to implement a remote procedure
   called "foo" which takes a float and returns and integer, you would
   have the following entry in a .proto file.

       message foo {
           message In {
               float input = 1;
           }
           message Result {
               int32 output = 1;
           }
       }

2. Use protoc to generate python files from the .proto files.

3. Create a Proxy object. The Proxy object will need a path to the Python
interface file generated by protoc and an asyncio event loop. 
